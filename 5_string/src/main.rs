/* 
char
    Defini√ß√£o: Representa um √∫nico caractere Unicode (4 bytes).

    Caracter√≠sticas: Pode armazenar qualquer caractere Unicode, n√£o apenas ASCII.

    Exemplo:
    let c: char = 'a';
    let heart_eyed_cat: char = 'üòª';

&str (String Slice ou Refer√™ncia de String)
    Defini√ß√£o: Uma fatia de string imut√°vel. Referencia uma parte de uma string que j√° est√° alocada em algum lugar.

    Caracter√≠sticas: Leve e r√°pida, usada para acessar substrings sem copiar dados.

    Exemplo:
    let s: &str = "hello";

String
    Defini√ß√£o: Uma string alocada na heap que pode ser modificada.

    Caracter√≠sticas: Mais flex√≠vel que &str, pode crescer e ser modificada em tempo de execu√ß√£o.

    Exemplo:
    let mut s = String::from("hello");
    s.push_str(", world!");
    Compara√ß√£o:

char √© para representar um √∫nico caractere.

&str √© uma refer√™ncia a uma string imut√°vel.

String √© uma string alocada na heap, mut√°vel e expans√≠vel.

Cada um tem seus usos espec√≠ficos, dependendo da necessidade de imutabilidade, efici√™ncia ou capacidade de modifica√ß√£o. 
*/

use std::io;

fn main() {
    let mut s = String::new();

    println!("Digite um texto: ");

    io::stdin()
        .read_line(&mut s)
        .expect("Erro reading console");

    println!("Voc√™ digitou: {s}");
}

/* 
O m√≥dulo std::io faz parte da biblioteca padr√£o de Rust e fornece funcionalidades para entrada e sa√≠da (I/O). Ele lida com opera√ß√µes como leitura e escrita em arquivos, entrada e sa√≠da de dados atrav√©s de fluxos, entre outros.
    Principais componentes:
        BufReader e BufWriter: Para leitura e escrita bufferizada.
        Read e Write: Traits fundamentais para leitura e escrita.
        Error: Tipo usado para indicar erros de I/O.
        Result: Tipo usado para resultados de opera√ß√µes de I/O que podem falhar.

io::stdin()
Defini√ß√£o: A fun√ß√£o io::stdin() obt√©m a entrada padr√£o (standard input) e retorna um handle para leitura.
*/